// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumiverse.time;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class OffsetArgs extends com.pulumi.resources.ResourceArgs {

    public static final OffsetArgs Empty = new OffsetArgs();

    /**
     * Base timestamp in [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339#section-5.8) format (see [RFC3339 time string](https://tools.ietf.org/html/rfc3339#section-5.8) e.g., `YYYY-MM-DDTHH:MM:SSZ`). Defaults to the current time.
     * 
     */
    @Import(name="baseRfc3339")
    private @Nullable Output<String> baseRfc3339;

    /**
     * @return Base timestamp in [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339#section-5.8) format (see [RFC3339 time string](https://tools.ietf.org/html/rfc3339#section-5.8) e.g., `YYYY-MM-DDTHH:MM:SSZ`). Defaults to the current time.
     * 
     */
    public Optional<Output<String>> baseRfc3339() {
        return Optional.ofNullable(this.baseRfc3339);
    }

    /**
     * Number of days to offset the base timestamp. At least one of the &#39;offset_&#39; arguments must be configured.
     * 
     */
    @Import(name="offsetDays")
    private @Nullable Output<Integer> offsetDays;

    /**
     * @return Number of days to offset the base timestamp. At least one of the &#39;offset_&#39; arguments must be configured.
     * 
     */
    public Optional<Output<Integer>> offsetDays() {
        return Optional.ofNullable(this.offsetDays);
    }

    /**
     * Number of hours to offset the base timestamp. At least one of the &#39;offset_&#39; arguments must be configured.
     * 
     */
    @Import(name="offsetHours")
    private @Nullable Output<Integer> offsetHours;

    /**
     * @return Number of hours to offset the base timestamp. At least one of the &#39;offset_&#39; arguments must be configured.
     * 
     */
    public Optional<Output<Integer>> offsetHours() {
        return Optional.ofNullable(this.offsetHours);
    }

    /**
     * Number of minutes to offset the base timestamp. At least one of the &#39;offset_&#39; arguments must be configured.
     * 
     */
    @Import(name="offsetMinutes")
    private @Nullable Output<Integer> offsetMinutes;

    /**
     * @return Number of minutes to offset the base timestamp. At least one of the &#39;offset_&#39; arguments must be configured.
     * 
     */
    public Optional<Output<Integer>> offsetMinutes() {
        return Optional.ofNullable(this.offsetMinutes);
    }

    /**
     * Number of months to offset the base timestamp. At least one of the &#39;offset_&#39; arguments must be configured.
     * 
     */
    @Import(name="offsetMonths")
    private @Nullable Output<Integer> offsetMonths;

    /**
     * @return Number of months to offset the base timestamp. At least one of the &#39;offset_&#39; arguments must be configured.
     * 
     */
    public Optional<Output<Integer>> offsetMonths() {
        return Optional.ofNullable(this.offsetMonths);
    }

    /**
     * Number of seconds to offset the base timestamp. At least one of the &#39;offset_&#39; arguments must be configured.
     * 
     */
    @Import(name="offsetSeconds")
    private @Nullable Output<Integer> offsetSeconds;

    /**
     * @return Number of seconds to offset the base timestamp. At least one of the &#39;offset_&#39; arguments must be configured.
     * 
     */
    public Optional<Output<Integer>> offsetSeconds() {
        return Optional.ofNullable(this.offsetSeconds);
    }

    /**
     * Number of years to offset the base timestamp. At least one of the &#39;offset_&#39; arguments must be configured.
     * 
     */
    @Import(name="offsetYears")
    private @Nullable Output<Integer> offsetYears;

    /**
     * @return Number of years to offset the base timestamp. At least one of the &#39;offset_&#39; arguments must be configured.
     * 
     */
    public Optional<Output<Integer>> offsetYears() {
        return Optional.ofNullable(this.offsetYears);
    }

    /**
     * Arbitrary map of values that, when changed, will trigger a new base timestamp value to be saved. See the main provider documentation for more information.
     * 
     */
    @Import(name="triggers")
    private @Nullable Output<Map<String,String>> triggers;

    /**
     * @return Arbitrary map of values that, when changed, will trigger a new base timestamp value to be saved. See the main provider documentation for more information.
     * 
     */
    public Optional<Output<Map<String,String>>> triggers() {
        return Optional.ofNullable(this.triggers);
    }

    private OffsetArgs() {}

    private OffsetArgs(OffsetArgs $) {
        this.baseRfc3339 = $.baseRfc3339;
        this.offsetDays = $.offsetDays;
        this.offsetHours = $.offsetHours;
        this.offsetMinutes = $.offsetMinutes;
        this.offsetMonths = $.offsetMonths;
        this.offsetSeconds = $.offsetSeconds;
        this.offsetYears = $.offsetYears;
        this.triggers = $.triggers;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(OffsetArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private OffsetArgs $;

        public Builder() {
            $ = new OffsetArgs();
        }

        public Builder(OffsetArgs defaults) {
            $ = new OffsetArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param baseRfc3339 Base timestamp in [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339#section-5.8) format (see [RFC3339 time string](https://tools.ietf.org/html/rfc3339#section-5.8) e.g., `YYYY-MM-DDTHH:MM:SSZ`). Defaults to the current time.
         * 
         * @return builder
         * 
         */
        public Builder baseRfc3339(@Nullable Output<String> baseRfc3339) {
            $.baseRfc3339 = baseRfc3339;
            return this;
        }

        /**
         * @param baseRfc3339 Base timestamp in [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339#section-5.8) format (see [RFC3339 time string](https://tools.ietf.org/html/rfc3339#section-5.8) e.g., `YYYY-MM-DDTHH:MM:SSZ`). Defaults to the current time.
         * 
         * @return builder
         * 
         */
        public Builder baseRfc3339(String baseRfc3339) {
            return baseRfc3339(Output.of(baseRfc3339));
        }

        /**
         * @param offsetDays Number of days to offset the base timestamp. At least one of the &#39;offset_&#39; arguments must be configured.
         * 
         * @return builder
         * 
         */
        public Builder offsetDays(@Nullable Output<Integer> offsetDays) {
            $.offsetDays = offsetDays;
            return this;
        }

        /**
         * @param offsetDays Number of days to offset the base timestamp. At least one of the &#39;offset_&#39; arguments must be configured.
         * 
         * @return builder
         * 
         */
        public Builder offsetDays(Integer offsetDays) {
            return offsetDays(Output.of(offsetDays));
        }

        /**
         * @param offsetHours Number of hours to offset the base timestamp. At least one of the &#39;offset_&#39; arguments must be configured.
         * 
         * @return builder
         * 
         */
        public Builder offsetHours(@Nullable Output<Integer> offsetHours) {
            $.offsetHours = offsetHours;
            return this;
        }

        /**
         * @param offsetHours Number of hours to offset the base timestamp. At least one of the &#39;offset_&#39; arguments must be configured.
         * 
         * @return builder
         * 
         */
        public Builder offsetHours(Integer offsetHours) {
            return offsetHours(Output.of(offsetHours));
        }

        /**
         * @param offsetMinutes Number of minutes to offset the base timestamp. At least one of the &#39;offset_&#39; arguments must be configured.
         * 
         * @return builder
         * 
         */
        public Builder offsetMinutes(@Nullable Output<Integer> offsetMinutes) {
            $.offsetMinutes = offsetMinutes;
            return this;
        }

        /**
         * @param offsetMinutes Number of minutes to offset the base timestamp. At least one of the &#39;offset_&#39; arguments must be configured.
         * 
         * @return builder
         * 
         */
        public Builder offsetMinutes(Integer offsetMinutes) {
            return offsetMinutes(Output.of(offsetMinutes));
        }

        /**
         * @param offsetMonths Number of months to offset the base timestamp. At least one of the &#39;offset_&#39; arguments must be configured.
         * 
         * @return builder
         * 
         */
        public Builder offsetMonths(@Nullable Output<Integer> offsetMonths) {
            $.offsetMonths = offsetMonths;
            return this;
        }

        /**
         * @param offsetMonths Number of months to offset the base timestamp. At least one of the &#39;offset_&#39; arguments must be configured.
         * 
         * @return builder
         * 
         */
        public Builder offsetMonths(Integer offsetMonths) {
            return offsetMonths(Output.of(offsetMonths));
        }

        /**
         * @param offsetSeconds Number of seconds to offset the base timestamp. At least one of the &#39;offset_&#39; arguments must be configured.
         * 
         * @return builder
         * 
         */
        public Builder offsetSeconds(@Nullable Output<Integer> offsetSeconds) {
            $.offsetSeconds = offsetSeconds;
            return this;
        }

        /**
         * @param offsetSeconds Number of seconds to offset the base timestamp. At least one of the &#39;offset_&#39; arguments must be configured.
         * 
         * @return builder
         * 
         */
        public Builder offsetSeconds(Integer offsetSeconds) {
            return offsetSeconds(Output.of(offsetSeconds));
        }

        /**
         * @param offsetYears Number of years to offset the base timestamp. At least one of the &#39;offset_&#39; arguments must be configured.
         * 
         * @return builder
         * 
         */
        public Builder offsetYears(@Nullable Output<Integer> offsetYears) {
            $.offsetYears = offsetYears;
            return this;
        }

        /**
         * @param offsetYears Number of years to offset the base timestamp. At least one of the &#39;offset_&#39; arguments must be configured.
         * 
         * @return builder
         * 
         */
        public Builder offsetYears(Integer offsetYears) {
            return offsetYears(Output.of(offsetYears));
        }

        /**
         * @param triggers Arbitrary map of values that, when changed, will trigger a new base timestamp value to be saved. See the main provider documentation for more information.
         * 
         * @return builder
         * 
         */
        public Builder triggers(@Nullable Output<Map<String,String>> triggers) {
            $.triggers = triggers;
            return this;
        }

        /**
         * @param triggers Arbitrary map of values that, when changed, will trigger a new base timestamp value to be saved. See the main provider documentation for more information.
         * 
         * @return builder
         * 
         */
        public Builder triggers(Map<String,String> triggers) {
            return triggers(Output.of(triggers));
        }

        public OffsetArgs build() {
            return $;
        }
    }

}
