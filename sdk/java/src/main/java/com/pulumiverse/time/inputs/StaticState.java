// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumiverse.time.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class StaticState extends com.pulumi.resources.ResourceArgs {

    public static final StaticState Empty = new StaticState();

    /**
     * Number day of timestamp.
     * 
     */
    @Import(name="day")
    private @Nullable Output<Integer> day;

    /**
     * @return Number day of timestamp.
     * 
     */
    public Optional<Output<Integer>> day() {
        return Optional.ofNullable(this.day);
    }

    /**
     * Number hour of timestamp.
     * 
     */
    @Import(name="hour")
    private @Nullable Output<Integer> hour;

    /**
     * @return Number hour of timestamp.
     * 
     */
    public Optional<Output<Integer>> hour() {
        return Optional.ofNullable(this.hour);
    }

    /**
     * Number minute of timestamp.
     * 
     */
    @Import(name="minute")
    private @Nullable Output<Integer> minute;

    /**
     * @return Number minute of timestamp.
     * 
     */
    public Optional<Output<Integer>> minute() {
        return Optional.ofNullable(this.minute);
    }

    /**
     * Number month of timestamp.
     * 
     */
    @Import(name="month")
    private @Nullable Output<Integer> month;

    /**
     * @return Number month of timestamp.
     * 
     */
    public Optional<Output<Integer>> month() {
        return Optional.ofNullable(this.month);
    }

    /**
     * Base timestamp in [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339#section-5.8) format (see [RFC3339 time string](https://tools.ietf.org/html/rfc3339#section-5.8) e.g., `YYYY-MM-DDTHH:MM:SSZ`). Defaults to the current time.
     * 
     */
    @Import(name="rfc3339")
    private @Nullable Output<String> rfc3339;

    /**
     * @return Base timestamp in [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339#section-5.8) format (see [RFC3339 time string](https://tools.ietf.org/html/rfc3339#section-5.8) e.g., `YYYY-MM-DDTHH:MM:SSZ`). Defaults to the current time.
     * 
     */
    public Optional<Output<String>> rfc3339() {
        return Optional.ofNullable(this.rfc3339);
    }

    /**
     * Number second of timestamp.
     * 
     */
    @Import(name="second")
    private @Nullable Output<Integer> second;

    /**
     * @return Number second of timestamp.
     * 
     */
    public Optional<Output<Integer>> second() {
        return Optional.ofNullable(this.second);
    }

    /**
     * Arbitrary map of values that, when changed, will trigger a new base timestamp value to be saved. See the main provider documentation for more information.
     * 
     */
    @Import(name="triggers")
    private @Nullable Output<Map<String,String>> triggers;

    /**
     * @return Arbitrary map of values that, when changed, will trigger a new base timestamp value to be saved. See the main provider documentation for more information.
     * 
     */
    public Optional<Output<Map<String,String>>> triggers() {
        return Optional.ofNullable(this.triggers);
    }

    /**
     * Number of seconds since epoch time, e.g. `1581489373`.
     * 
     */
    @Import(name="unix")
    private @Nullable Output<Integer> unix;

    /**
     * @return Number of seconds since epoch time, e.g. `1581489373`.
     * 
     */
    public Optional<Output<Integer>> unix() {
        return Optional.ofNullable(this.unix);
    }

    /**
     * Number year of timestamp.
     * 
     */
    @Import(name="year")
    private @Nullable Output<Integer> year;

    /**
     * @return Number year of timestamp.
     * 
     */
    public Optional<Output<Integer>> year() {
        return Optional.ofNullable(this.year);
    }

    private StaticState() {}

    private StaticState(StaticState $) {
        this.day = $.day;
        this.hour = $.hour;
        this.minute = $.minute;
        this.month = $.month;
        this.rfc3339 = $.rfc3339;
        this.second = $.second;
        this.triggers = $.triggers;
        this.unix = $.unix;
        this.year = $.year;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(StaticState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private StaticState $;

        public Builder() {
            $ = new StaticState();
        }

        public Builder(StaticState defaults) {
            $ = new StaticState(Objects.requireNonNull(defaults));
        }

        /**
         * @param day Number day of timestamp.
         * 
         * @return builder
         * 
         */
        public Builder day(@Nullable Output<Integer> day) {
            $.day = day;
            return this;
        }

        /**
         * @param day Number day of timestamp.
         * 
         * @return builder
         * 
         */
        public Builder day(Integer day) {
            return day(Output.of(day));
        }

        /**
         * @param hour Number hour of timestamp.
         * 
         * @return builder
         * 
         */
        public Builder hour(@Nullable Output<Integer> hour) {
            $.hour = hour;
            return this;
        }

        /**
         * @param hour Number hour of timestamp.
         * 
         * @return builder
         * 
         */
        public Builder hour(Integer hour) {
            return hour(Output.of(hour));
        }

        /**
         * @param minute Number minute of timestamp.
         * 
         * @return builder
         * 
         */
        public Builder minute(@Nullable Output<Integer> minute) {
            $.minute = minute;
            return this;
        }

        /**
         * @param minute Number minute of timestamp.
         * 
         * @return builder
         * 
         */
        public Builder minute(Integer minute) {
            return minute(Output.of(minute));
        }

        /**
         * @param month Number month of timestamp.
         * 
         * @return builder
         * 
         */
        public Builder month(@Nullable Output<Integer> month) {
            $.month = month;
            return this;
        }

        /**
         * @param month Number month of timestamp.
         * 
         * @return builder
         * 
         */
        public Builder month(Integer month) {
            return month(Output.of(month));
        }

        /**
         * @param rfc3339 Base timestamp in [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339#section-5.8) format (see [RFC3339 time string](https://tools.ietf.org/html/rfc3339#section-5.8) e.g., `YYYY-MM-DDTHH:MM:SSZ`). Defaults to the current time.
         * 
         * @return builder
         * 
         */
        public Builder rfc3339(@Nullable Output<String> rfc3339) {
            $.rfc3339 = rfc3339;
            return this;
        }

        /**
         * @param rfc3339 Base timestamp in [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339#section-5.8) format (see [RFC3339 time string](https://tools.ietf.org/html/rfc3339#section-5.8) e.g., `YYYY-MM-DDTHH:MM:SSZ`). Defaults to the current time.
         * 
         * @return builder
         * 
         */
        public Builder rfc3339(String rfc3339) {
            return rfc3339(Output.of(rfc3339));
        }

        /**
         * @param second Number second of timestamp.
         * 
         * @return builder
         * 
         */
        public Builder second(@Nullable Output<Integer> second) {
            $.second = second;
            return this;
        }

        /**
         * @param second Number second of timestamp.
         * 
         * @return builder
         * 
         */
        public Builder second(Integer second) {
            return second(Output.of(second));
        }

        /**
         * @param triggers Arbitrary map of values that, when changed, will trigger a new base timestamp value to be saved. See the main provider documentation for more information.
         * 
         * @return builder
         * 
         */
        public Builder triggers(@Nullable Output<Map<String,String>> triggers) {
            $.triggers = triggers;
            return this;
        }

        /**
         * @param triggers Arbitrary map of values that, when changed, will trigger a new base timestamp value to be saved. See the main provider documentation for more information.
         * 
         * @return builder
         * 
         */
        public Builder triggers(Map<String,String> triggers) {
            return triggers(Output.of(triggers));
        }

        /**
         * @param unix Number of seconds since epoch time, e.g. `1581489373`.
         * 
         * @return builder
         * 
         */
        public Builder unix(@Nullable Output<Integer> unix) {
            $.unix = unix;
            return this;
        }

        /**
         * @param unix Number of seconds since epoch time, e.g. `1581489373`.
         * 
         * @return builder
         * 
         */
        public Builder unix(Integer unix) {
            return unix(Output.of(unix));
        }

        /**
         * @param year Number year of timestamp.
         * 
         * @return builder
         * 
         */
        public Builder year(@Nullable Output<Integer> year) {
            $.year = year;
            return this;
        }

        /**
         * @param year Number year of timestamp.
         * 
         * @return builder
         * 
         */
        public Builder year(Integer year) {
            return year(Output.of(year));
        }

        public StaticState build() {
            return $;
        }
    }

}
