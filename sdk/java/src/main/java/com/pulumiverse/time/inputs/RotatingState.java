// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumiverse.time.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RotatingState extends com.pulumi.resources.ResourceArgs {

    public static final RotatingState Empty = new RotatingState();

    /**
     * Number day of timestamp.
     * 
     */
    @Import(name="day")
    private @Nullable Output<Integer> day;

    /**
     * @return Number day of timestamp.
     * 
     */
    public Optional<Output<Integer>> day() {
        return Optional.ofNullable(this.day);
    }

    /**
     * Number hour of timestamp.
     * 
     */
    @Import(name="hour")
    private @Nullable Output<Integer> hour;

    /**
     * @return Number hour of timestamp.
     * 
     */
    public Optional<Output<Integer>> hour() {
        return Optional.ofNullable(this.hour);
    }

    /**
     * Number minute of timestamp.
     * 
     */
    @Import(name="minute")
    private @Nullable Output<Integer> minute;

    /**
     * @return Number minute of timestamp.
     * 
     */
    public Optional<Output<Integer>> minute() {
        return Optional.ofNullable(this.minute);
    }

    /**
     * Number month of timestamp.
     * 
     */
    @Import(name="month")
    private @Nullable Output<Integer> month;

    /**
     * @return Number month of timestamp.
     * 
     */
    public Optional<Output<Integer>> month() {
        return Optional.ofNullable(this.month);
    }

    /**
     * Base timestamp in [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339#section-5.8) format (see [RFC3339 time string](https://tools.ietf.org/html/rfc3339#section-5.8) e.g., `YYYY-MM-DDTHH:MM:SSZ`). Defaults to the current time.
     * 
     */
    @Import(name="rfc3339")
    private @Nullable Output<String> rfc3339;

    /**
     * @return Base timestamp in [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339#section-5.8) format (see [RFC3339 time string](https://tools.ietf.org/html/rfc3339#section-5.8) e.g., `YYYY-MM-DDTHH:MM:SSZ`). Defaults to the current time.
     * 
     */
    public Optional<Output<String>> rfc3339() {
        return Optional.ofNullable(this.rfc3339);
    }

    /**
     * Number of days to add to the base timestamp to configure the rotation timestamp. When the current time has passed the rotation timestamp, the resource will trigger recreation. At least one of the &#39;rotation_&#39; arguments must be configured.
     * 
     */
    @Import(name="rotationDays")
    private @Nullable Output<Integer> rotationDays;

    /**
     * @return Number of days to add to the base timestamp to configure the rotation timestamp. When the current time has passed the rotation timestamp, the resource will trigger recreation. At least one of the &#39;rotation_&#39; arguments must be configured.
     * 
     */
    public Optional<Output<Integer>> rotationDays() {
        return Optional.ofNullable(this.rotationDays);
    }

    /**
     * Number of hours to add to the base timestamp to configure the rotation timestamp. When the current time has passed the rotation timestamp, the resource will trigger recreation. At least one of the &#39;rotation_&#39; arguments must be configured.
     * 
     */
    @Import(name="rotationHours")
    private @Nullable Output<Integer> rotationHours;

    /**
     * @return Number of hours to add to the base timestamp to configure the rotation timestamp. When the current time has passed the rotation timestamp, the resource will trigger recreation. At least one of the &#39;rotation_&#39; arguments must be configured.
     * 
     */
    public Optional<Output<Integer>> rotationHours() {
        return Optional.ofNullable(this.rotationHours);
    }

    /**
     * Number of minutes to add to the base timestamp to configure the rotation timestamp. When the current time has passed the rotation timestamp, the resource will trigger recreation. At least one of the &#39;rotation_&#39; arguments must be configured.
     * 
     */
    @Import(name="rotationMinutes")
    private @Nullable Output<Integer> rotationMinutes;

    /**
     * @return Number of minutes to add to the base timestamp to configure the rotation timestamp. When the current time has passed the rotation timestamp, the resource will trigger recreation. At least one of the &#39;rotation_&#39; arguments must be configured.
     * 
     */
    public Optional<Output<Integer>> rotationMinutes() {
        return Optional.ofNullable(this.rotationMinutes);
    }

    /**
     * Number of months to add to the base timestamp to configure the rotation timestamp. When the current time has passed the rotation timestamp, the resource will trigger recreation. At least one of the &#39;rotation_&#39; arguments must be configured.
     * 
     */
    @Import(name="rotationMonths")
    private @Nullable Output<Integer> rotationMonths;

    /**
     * @return Number of months to add to the base timestamp to configure the rotation timestamp. When the current time has passed the rotation timestamp, the resource will trigger recreation. At least one of the &#39;rotation_&#39; arguments must be configured.
     * 
     */
    public Optional<Output<Integer>> rotationMonths() {
        return Optional.ofNullable(this.rotationMonths);
    }

    /**
     * Configure the rotation timestamp with an [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339#section-5.8) format of the offset timestamp. When the current time has passed the rotation timestamp, the resource will trigger recreation. At least one of the &#39;rotation_&#39; arguments must be configured.
     * 
     */
    @Import(name="rotationRfc3339")
    private @Nullable Output<String> rotationRfc3339;

    /**
     * @return Configure the rotation timestamp with an [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339#section-5.8) format of the offset timestamp. When the current time has passed the rotation timestamp, the resource will trigger recreation. At least one of the &#39;rotation_&#39; arguments must be configured.
     * 
     */
    public Optional<Output<String>> rotationRfc3339() {
        return Optional.ofNullable(this.rotationRfc3339);
    }

    /**
     * Number of years to add to the base timestamp to configure the rotation timestamp. When the current time has passed the rotation timestamp, the resource will trigger recreation. At least one of the &#39;rotation_&#39; arguments must be configured.
     * 
     */
    @Import(name="rotationYears")
    private @Nullable Output<Integer> rotationYears;

    /**
     * @return Number of years to add to the base timestamp to configure the rotation timestamp. When the current time has passed the rotation timestamp, the resource will trigger recreation. At least one of the &#39;rotation_&#39; arguments must be configured.
     * 
     */
    public Optional<Output<Integer>> rotationYears() {
        return Optional.ofNullable(this.rotationYears);
    }

    /**
     * Number second of timestamp.
     * 
     */
    @Import(name="second")
    private @Nullable Output<Integer> second;

    /**
     * @return Number second of timestamp.
     * 
     */
    public Optional<Output<Integer>> second() {
        return Optional.ofNullable(this.second);
    }

    /**
     * Arbitrary map of values that, when changed, will trigger a new base timestamp value to be saved. These conditions recreate the resource in addition to other rotation arguments. See the main provider documentation for more information.
     * 
     */
    @Import(name="triggers")
    private @Nullable Output<Map<String,String>> triggers;

    /**
     * @return Arbitrary map of values that, when changed, will trigger a new base timestamp value to be saved. These conditions recreate the resource in addition to other rotation arguments. See the main provider documentation for more information.
     * 
     */
    public Optional<Output<Map<String,String>>> triggers() {
        return Optional.ofNullable(this.triggers);
    }

    /**
     * Number of seconds since epoch time, e.g. `1581489373`.
     * 
     */
    @Import(name="unix")
    private @Nullable Output<Integer> unix;

    /**
     * @return Number of seconds since epoch time, e.g. `1581489373`.
     * 
     */
    public Optional<Output<Integer>> unix() {
        return Optional.ofNullable(this.unix);
    }

    /**
     * Number year of timestamp.
     * 
     */
    @Import(name="year")
    private @Nullable Output<Integer> year;

    /**
     * @return Number year of timestamp.
     * 
     */
    public Optional<Output<Integer>> year() {
        return Optional.ofNullable(this.year);
    }

    private RotatingState() {}

    private RotatingState(RotatingState $) {
        this.day = $.day;
        this.hour = $.hour;
        this.minute = $.minute;
        this.month = $.month;
        this.rfc3339 = $.rfc3339;
        this.rotationDays = $.rotationDays;
        this.rotationHours = $.rotationHours;
        this.rotationMinutes = $.rotationMinutes;
        this.rotationMonths = $.rotationMonths;
        this.rotationRfc3339 = $.rotationRfc3339;
        this.rotationYears = $.rotationYears;
        this.second = $.second;
        this.triggers = $.triggers;
        this.unix = $.unix;
        this.year = $.year;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RotatingState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RotatingState $;

        public Builder() {
            $ = new RotatingState();
        }

        public Builder(RotatingState defaults) {
            $ = new RotatingState(Objects.requireNonNull(defaults));
        }

        /**
         * @param day Number day of timestamp.
         * 
         * @return builder
         * 
         */
        public Builder day(@Nullable Output<Integer> day) {
            $.day = day;
            return this;
        }

        /**
         * @param day Number day of timestamp.
         * 
         * @return builder
         * 
         */
        public Builder day(Integer day) {
            return day(Output.of(day));
        }

        /**
         * @param hour Number hour of timestamp.
         * 
         * @return builder
         * 
         */
        public Builder hour(@Nullable Output<Integer> hour) {
            $.hour = hour;
            return this;
        }

        /**
         * @param hour Number hour of timestamp.
         * 
         * @return builder
         * 
         */
        public Builder hour(Integer hour) {
            return hour(Output.of(hour));
        }

        /**
         * @param minute Number minute of timestamp.
         * 
         * @return builder
         * 
         */
        public Builder minute(@Nullable Output<Integer> minute) {
            $.minute = minute;
            return this;
        }

        /**
         * @param minute Number minute of timestamp.
         * 
         * @return builder
         * 
         */
        public Builder minute(Integer minute) {
            return minute(Output.of(minute));
        }

        /**
         * @param month Number month of timestamp.
         * 
         * @return builder
         * 
         */
        public Builder month(@Nullable Output<Integer> month) {
            $.month = month;
            return this;
        }

        /**
         * @param month Number month of timestamp.
         * 
         * @return builder
         * 
         */
        public Builder month(Integer month) {
            return month(Output.of(month));
        }

        /**
         * @param rfc3339 Base timestamp in [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339#section-5.8) format (see [RFC3339 time string](https://tools.ietf.org/html/rfc3339#section-5.8) e.g., `YYYY-MM-DDTHH:MM:SSZ`). Defaults to the current time.
         * 
         * @return builder
         * 
         */
        public Builder rfc3339(@Nullable Output<String> rfc3339) {
            $.rfc3339 = rfc3339;
            return this;
        }

        /**
         * @param rfc3339 Base timestamp in [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339#section-5.8) format (see [RFC3339 time string](https://tools.ietf.org/html/rfc3339#section-5.8) e.g., `YYYY-MM-DDTHH:MM:SSZ`). Defaults to the current time.
         * 
         * @return builder
         * 
         */
        public Builder rfc3339(String rfc3339) {
            return rfc3339(Output.of(rfc3339));
        }

        /**
         * @param rotationDays Number of days to add to the base timestamp to configure the rotation timestamp. When the current time has passed the rotation timestamp, the resource will trigger recreation. At least one of the &#39;rotation_&#39; arguments must be configured.
         * 
         * @return builder
         * 
         */
        public Builder rotationDays(@Nullable Output<Integer> rotationDays) {
            $.rotationDays = rotationDays;
            return this;
        }

        /**
         * @param rotationDays Number of days to add to the base timestamp to configure the rotation timestamp. When the current time has passed the rotation timestamp, the resource will trigger recreation. At least one of the &#39;rotation_&#39; arguments must be configured.
         * 
         * @return builder
         * 
         */
        public Builder rotationDays(Integer rotationDays) {
            return rotationDays(Output.of(rotationDays));
        }

        /**
         * @param rotationHours Number of hours to add to the base timestamp to configure the rotation timestamp. When the current time has passed the rotation timestamp, the resource will trigger recreation. At least one of the &#39;rotation_&#39; arguments must be configured.
         * 
         * @return builder
         * 
         */
        public Builder rotationHours(@Nullable Output<Integer> rotationHours) {
            $.rotationHours = rotationHours;
            return this;
        }

        /**
         * @param rotationHours Number of hours to add to the base timestamp to configure the rotation timestamp. When the current time has passed the rotation timestamp, the resource will trigger recreation. At least one of the &#39;rotation_&#39; arguments must be configured.
         * 
         * @return builder
         * 
         */
        public Builder rotationHours(Integer rotationHours) {
            return rotationHours(Output.of(rotationHours));
        }

        /**
         * @param rotationMinutes Number of minutes to add to the base timestamp to configure the rotation timestamp. When the current time has passed the rotation timestamp, the resource will trigger recreation. At least one of the &#39;rotation_&#39; arguments must be configured.
         * 
         * @return builder
         * 
         */
        public Builder rotationMinutes(@Nullable Output<Integer> rotationMinutes) {
            $.rotationMinutes = rotationMinutes;
            return this;
        }

        /**
         * @param rotationMinutes Number of minutes to add to the base timestamp to configure the rotation timestamp. When the current time has passed the rotation timestamp, the resource will trigger recreation. At least one of the &#39;rotation_&#39; arguments must be configured.
         * 
         * @return builder
         * 
         */
        public Builder rotationMinutes(Integer rotationMinutes) {
            return rotationMinutes(Output.of(rotationMinutes));
        }

        /**
         * @param rotationMonths Number of months to add to the base timestamp to configure the rotation timestamp. When the current time has passed the rotation timestamp, the resource will trigger recreation. At least one of the &#39;rotation_&#39; arguments must be configured.
         * 
         * @return builder
         * 
         */
        public Builder rotationMonths(@Nullable Output<Integer> rotationMonths) {
            $.rotationMonths = rotationMonths;
            return this;
        }

        /**
         * @param rotationMonths Number of months to add to the base timestamp to configure the rotation timestamp. When the current time has passed the rotation timestamp, the resource will trigger recreation. At least one of the &#39;rotation_&#39; arguments must be configured.
         * 
         * @return builder
         * 
         */
        public Builder rotationMonths(Integer rotationMonths) {
            return rotationMonths(Output.of(rotationMonths));
        }

        /**
         * @param rotationRfc3339 Configure the rotation timestamp with an [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339#section-5.8) format of the offset timestamp. When the current time has passed the rotation timestamp, the resource will trigger recreation. At least one of the &#39;rotation_&#39; arguments must be configured.
         * 
         * @return builder
         * 
         */
        public Builder rotationRfc3339(@Nullable Output<String> rotationRfc3339) {
            $.rotationRfc3339 = rotationRfc3339;
            return this;
        }

        /**
         * @param rotationRfc3339 Configure the rotation timestamp with an [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339#section-5.8) format of the offset timestamp. When the current time has passed the rotation timestamp, the resource will trigger recreation. At least one of the &#39;rotation_&#39; arguments must be configured.
         * 
         * @return builder
         * 
         */
        public Builder rotationRfc3339(String rotationRfc3339) {
            return rotationRfc3339(Output.of(rotationRfc3339));
        }

        /**
         * @param rotationYears Number of years to add to the base timestamp to configure the rotation timestamp. When the current time has passed the rotation timestamp, the resource will trigger recreation. At least one of the &#39;rotation_&#39; arguments must be configured.
         * 
         * @return builder
         * 
         */
        public Builder rotationYears(@Nullable Output<Integer> rotationYears) {
            $.rotationYears = rotationYears;
            return this;
        }

        /**
         * @param rotationYears Number of years to add to the base timestamp to configure the rotation timestamp. When the current time has passed the rotation timestamp, the resource will trigger recreation. At least one of the &#39;rotation_&#39; arguments must be configured.
         * 
         * @return builder
         * 
         */
        public Builder rotationYears(Integer rotationYears) {
            return rotationYears(Output.of(rotationYears));
        }

        /**
         * @param second Number second of timestamp.
         * 
         * @return builder
         * 
         */
        public Builder second(@Nullable Output<Integer> second) {
            $.second = second;
            return this;
        }

        /**
         * @param second Number second of timestamp.
         * 
         * @return builder
         * 
         */
        public Builder second(Integer second) {
            return second(Output.of(second));
        }

        /**
         * @param triggers Arbitrary map of values that, when changed, will trigger a new base timestamp value to be saved. These conditions recreate the resource in addition to other rotation arguments. See the main provider documentation for more information.
         * 
         * @return builder
         * 
         */
        public Builder triggers(@Nullable Output<Map<String,String>> triggers) {
            $.triggers = triggers;
            return this;
        }

        /**
         * @param triggers Arbitrary map of values that, when changed, will trigger a new base timestamp value to be saved. These conditions recreate the resource in addition to other rotation arguments. See the main provider documentation for more information.
         * 
         * @return builder
         * 
         */
        public Builder triggers(Map<String,String> triggers) {
            return triggers(Output.of(triggers));
        }

        /**
         * @param unix Number of seconds since epoch time, e.g. `1581489373`.
         * 
         * @return builder
         * 
         */
        public Builder unix(@Nullable Output<Integer> unix) {
            $.unix = unix;
            return this;
        }

        /**
         * @param unix Number of seconds since epoch time, e.g. `1581489373`.
         * 
         * @return builder
         * 
         */
        public Builder unix(Integer unix) {
            return unix(Output.of(unix));
        }

        /**
         * @param year Number year of timestamp.
         * 
         * @return builder
         * 
         */
        public Builder year(@Nullable Output<Integer> year) {
            $.year = year;
            return this;
        }

        /**
         * @param year Number year of timestamp.
         * 
         * @return builder
         * 
         */
        public Builder year(Integer year) {
            return year(Output.of(year));
        }

        public RotatingState build() {
            return $;
        }
    }

}
