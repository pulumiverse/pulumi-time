// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package time

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
	"github.com/pulumiverse/pulumi-time/sdk/go/time/internal"
)

// ## Example Usage
// ### Basic Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-time/sdk/go/time"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := time.NewOffset(ctx, "example", &time.OffsetArgs{
//				OffsetDays: pulumi.Int(7),
//			})
//			if err != nil {
//				return err
//			}
//			ctx.Export("oneWeekFromNow", example.Rfc3339)
//			return nil
//		})
//	}
//
// ```
// ### Triggers Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/ec2"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-time/sdk/go/time"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			amiUpdate, err := time.NewOffset(ctx, "amiUpdate", &time.OffsetArgs{
//				Triggers: pulumi.StringMap{
//					"ami_id": pulumi.Any(data.Aws_ami.Example.Id),
//				},
//				OffsetDays: pulumi.Int(7),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = ec2.NewInstance(ctx, "server", &ec2.InstanceArgs{
//				Ami: amiUpdate.Triggers.ApplyT(func(triggers interface{}) (*string, error) {
//					return &triggers.AmiId, nil
//				}).(pulumi.StringPtrOutput),
//				Tags: pulumi.StringMap{
//					"ExpirationTime": amiUpdate.Rfc3339,
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// This resource can be imported using the base UTC RFC3339 timestamp and offset years, months, days, hours, minutes, and seconds, separated by commas (`,`), e.g.
//
// ```sh
//
//	$ pulumi import time:index/offset:Offset example 2020-02-12T06:36:13Z,0,0,7,0,0,0
//
// ```
//
//	The `triggers` argument cannot be imported.
type Offset struct {
	pulumi.CustomResourceState

	// Base timestamp in [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339#section-5.8) format (see [RFC3339 time string](https://tools.ietf.org/html/rfc3339#section-5.8) e.g., `YYYY-MM-DDTHH:MM:SSZ`). Defaults to the current time.
	BaseRfc3339 pulumi.StringOutput `pulumi:"baseRfc3339"`
	// Number day of offset timestamp.
	Day pulumi.IntOutput `pulumi:"day"`
	// Number hour of offset timestamp.
	Hour pulumi.IntOutput `pulumi:"hour"`
	// Number minute of offset timestamp.
	Minute pulumi.IntOutput `pulumi:"minute"`
	// Number month of offset timestamp.
	Month pulumi.IntOutput `pulumi:"month"`
	// Number of days to offset the base timestamp. At least one of the 'offset_' arguments must be configured.
	OffsetDays pulumi.IntPtrOutput `pulumi:"offsetDays"`
	// Number of hours to offset the base timestamp. At least one of the 'offset_' arguments must be configured.
	OffsetHours pulumi.IntPtrOutput `pulumi:"offsetHours"`
	// Number of minutes to offset the base timestamp. At least one of the 'offset_' arguments must be configured.
	OffsetMinutes pulumi.IntPtrOutput `pulumi:"offsetMinutes"`
	// Number of months to offset the base timestamp. At least one of the 'offset_' arguments must be configured.
	OffsetMonths pulumi.IntPtrOutput `pulumi:"offsetMonths"`
	// Number of seconds to offset the base timestamp. At least one of the 'offset_' arguments must be configured.
	OffsetSeconds pulumi.IntPtrOutput `pulumi:"offsetSeconds"`
	// Number of years to offset the base timestamp. At least one of the 'offset_' arguments must be configured.
	OffsetYears pulumi.IntPtrOutput `pulumi:"offsetYears"`
	// RFC3339 format of the offset timestamp, e.g. `2020-02-12T06:36:13Z`.
	Rfc3339 pulumi.StringOutput `pulumi:"rfc3339"`
	// Number second of offset timestamp.
	Second pulumi.IntOutput `pulumi:"second"`
	// Arbitrary map of values that, when changed, will trigger a new base timestamp value to be saved. See the main provider documentation for more information.
	Triggers pulumi.StringMapOutput `pulumi:"triggers"`
	// Number of seconds since epoch time, e.g. `1581489373`.
	Unix pulumi.IntOutput `pulumi:"unix"`
	// Number year of offset timestamp.
	Year pulumi.IntOutput `pulumi:"year"`
}

// NewOffset registers a new resource with the given unique name, arguments, and options.
func NewOffset(ctx *pulumi.Context,
	name string, args *OffsetArgs, opts ...pulumi.ResourceOption) (*Offset, error) {
	if args == nil {
		args = &OffsetArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Offset
	err := ctx.RegisterResource("time:index/offset:Offset", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetOffset gets an existing Offset resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetOffset(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *OffsetState, opts ...pulumi.ResourceOption) (*Offset, error) {
	var resource Offset
	err := ctx.ReadResource("time:index/offset:Offset", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Offset resources.
type offsetState struct {
	// Base timestamp in [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339#section-5.8) format (see [RFC3339 time string](https://tools.ietf.org/html/rfc3339#section-5.8) e.g., `YYYY-MM-DDTHH:MM:SSZ`). Defaults to the current time.
	BaseRfc3339 *string `pulumi:"baseRfc3339"`
	// Number day of offset timestamp.
	Day *int `pulumi:"day"`
	// Number hour of offset timestamp.
	Hour *int `pulumi:"hour"`
	// Number minute of offset timestamp.
	Minute *int `pulumi:"minute"`
	// Number month of offset timestamp.
	Month *int `pulumi:"month"`
	// Number of days to offset the base timestamp. At least one of the 'offset_' arguments must be configured.
	OffsetDays *int `pulumi:"offsetDays"`
	// Number of hours to offset the base timestamp. At least one of the 'offset_' arguments must be configured.
	OffsetHours *int `pulumi:"offsetHours"`
	// Number of minutes to offset the base timestamp. At least one of the 'offset_' arguments must be configured.
	OffsetMinutes *int `pulumi:"offsetMinutes"`
	// Number of months to offset the base timestamp. At least one of the 'offset_' arguments must be configured.
	OffsetMonths *int `pulumi:"offsetMonths"`
	// Number of seconds to offset the base timestamp. At least one of the 'offset_' arguments must be configured.
	OffsetSeconds *int `pulumi:"offsetSeconds"`
	// Number of years to offset the base timestamp. At least one of the 'offset_' arguments must be configured.
	OffsetYears *int `pulumi:"offsetYears"`
	// RFC3339 format of the offset timestamp, e.g. `2020-02-12T06:36:13Z`.
	Rfc3339 *string `pulumi:"rfc3339"`
	// Number second of offset timestamp.
	Second *int `pulumi:"second"`
	// Arbitrary map of values that, when changed, will trigger a new base timestamp value to be saved. See the main provider documentation for more information.
	Triggers map[string]string `pulumi:"triggers"`
	// Number of seconds since epoch time, e.g. `1581489373`.
	Unix *int `pulumi:"unix"`
	// Number year of offset timestamp.
	Year *int `pulumi:"year"`
}

type OffsetState struct {
	// Base timestamp in [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339#section-5.8) format (see [RFC3339 time string](https://tools.ietf.org/html/rfc3339#section-5.8) e.g., `YYYY-MM-DDTHH:MM:SSZ`). Defaults to the current time.
	BaseRfc3339 pulumi.StringPtrInput
	// Number day of offset timestamp.
	Day pulumi.IntPtrInput
	// Number hour of offset timestamp.
	Hour pulumi.IntPtrInput
	// Number minute of offset timestamp.
	Minute pulumi.IntPtrInput
	// Number month of offset timestamp.
	Month pulumi.IntPtrInput
	// Number of days to offset the base timestamp. At least one of the 'offset_' arguments must be configured.
	OffsetDays pulumi.IntPtrInput
	// Number of hours to offset the base timestamp. At least one of the 'offset_' arguments must be configured.
	OffsetHours pulumi.IntPtrInput
	// Number of minutes to offset the base timestamp. At least one of the 'offset_' arguments must be configured.
	OffsetMinutes pulumi.IntPtrInput
	// Number of months to offset the base timestamp. At least one of the 'offset_' arguments must be configured.
	OffsetMonths pulumi.IntPtrInput
	// Number of seconds to offset the base timestamp. At least one of the 'offset_' arguments must be configured.
	OffsetSeconds pulumi.IntPtrInput
	// Number of years to offset the base timestamp. At least one of the 'offset_' arguments must be configured.
	OffsetYears pulumi.IntPtrInput
	// RFC3339 format of the offset timestamp, e.g. `2020-02-12T06:36:13Z`.
	Rfc3339 pulumi.StringPtrInput
	// Number second of offset timestamp.
	Second pulumi.IntPtrInput
	// Arbitrary map of values that, when changed, will trigger a new base timestamp value to be saved. See the main provider documentation for more information.
	Triggers pulumi.StringMapInput
	// Number of seconds since epoch time, e.g. `1581489373`.
	Unix pulumi.IntPtrInput
	// Number year of offset timestamp.
	Year pulumi.IntPtrInput
}

func (OffsetState) ElementType() reflect.Type {
	return reflect.TypeOf((*offsetState)(nil)).Elem()
}

type offsetArgs struct {
	// Base timestamp in [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339#section-5.8) format (see [RFC3339 time string](https://tools.ietf.org/html/rfc3339#section-5.8) e.g., `YYYY-MM-DDTHH:MM:SSZ`). Defaults to the current time.
	BaseRfc3339 *string `pulumi:"baseRfc3339"`
	// Number of days to offset the base timestamp. At least one of the 'offset_' arguments must be configured.
	OffsetDays *int `pulumi:"offsetDays"`
	// Number of hours to offset the base timestamp. At least one of the 'offset_' arguments must be configured.
	OffsetHours *int `pulumi:"offsetHours"`
	// Number of minutes to offset the base timestamp. At least one of the 'offset_' arguments must be configured.
	OffsetMinutes *int `pulumi:"offsetMinutes"`
	// Number of months to offset the base timestamp. At least one of the 'offset_' arguments must be configured.
	OffsetMonths *int `pulumi:"offsetMonths"`
	// Number of seconds to offset the base timestamp. At least one of the 'offset_' arguments must be configured.
	OffsetSeconds *int `pulumi:"offsetSeconds"`
	// Number of years to offset the base timestamp. At least one of the 'offset_' arguments must be configured.
	OffsetYears *int `pulumi:"offsetYears"`
	// Arbitrary map of values that, when changed, will trigger a new base timestamp value to be saved. See the main provider documentation for more information.
	Triggers map[string]string `pulumi:"triggers"`
}

// The set of arguments for constructing a Offset resource.
type OffsetArgs struct {
	// Base timestamp in [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339#section-5.8) format (see [RFC3339 time string](https://tools.ietf.org/html/rfc3339#section-5.8) e.g., `YYYY-MM-DDTHH:MM:SSZ`). Defaults to the current time.
	BaseRfc3339 pulumi.StringPtrInput
	// Number of days to offset the base timestamp. At least one of the 'offset_' arguments must be configured.
	OffsetDays pulumi.IntPtrInput
	// Number of hours to offset the base timestamp. At least one of the 'offset_' arguments must be configured.
	OffsetHours pulumi.IntPtrInput
	// Number of minutes to offset the base timestamp. At least one of the 'offset_' arguments must be configured.
	OffsetMinutes pulumi.IntPtrInput
	// Number of months to offset the base timestamp. At least one of the 'offset_' arguments must be configured.
	OffsetMonths pulumi.IntPtrInput
	// Number of seconds to offset the base timestamp. At least one of the 'offset_' arguments must be configured.
	OffsetSeconds pulumi.IntPtrInput
	// Number of years to offset the base timestamp. At least one of the 'offset_' arguments must be configured.
	OffsetYears pulumi.IntPtrInput
	// Arbitrary map of values that, when changed, will trigger a new base timestamp value to be saved. See the main provider documentation for more information.
	Triggers pulumi.StringMapInput
}

func (OffsetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*offsetArgs)(nil)).Elem()
}

type OffsetInput interface {
	pulumi.Input

	ToOffsetOutput() OffsetOutput
	ToOffsetOutputWithContext(ctx context.Context) OffsetOutput
}

func (*Offset) ElementType() reflect.Type {
	return reflect.TypeOf((**Offset)(nil)).Elem()
}

func (i *Offset) ToOffsetOutput() OffsetOutput {
	return i.ToOffsetOutputWithContext(context.Background())
}

func (i *Offset) ToOffsetOutputWithContext(ctx context.Context) OffsetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OffsetOutput)
}

func (i *Offset) ToOutput(ctx context.Context) pulumix.Output[*Offset] {
	return pulumix.Output[*Offset]{
		OutputState: i.ToOffsetOutputWithContext(ctx).OutputState,
	}
}

// OffsetArrayInput is an input type that accepts OffsetArray and OffsetArrayOutput values.
// You can construct a concrete instance of `OffsetArrayInput` via:
//
//	OffsetArray{ OffsetArgs{...} }
type OffsetArrayInput interface {
	pulumi.Input

	ToOffsetArrayOutput() OffsetArrayOutput
	ToOffsetArrayOutputWithContext(context.Context) OffsetArrayOutput
}

type OffsetArray []OffsetInput

func (OffsetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Offset)(nil)).Elem()
}

func (i OffsetArray) ToOffsetArrayOutput() OffsetArrayOutput {
	return i.ToOffsetArrayOutputWithContext(context.Background())
}

func (i OffsetArray) ToOffsetArrayOutputWithContext(ctx context.Context) OffsetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OffsetArrayOutput)
}

func (i OffsetArray) ToOutput(ctx context.Context) pulumix.Output[[]*Offset] {
	return pulumix.Output[[]*Offset]{
		OutputState: i.ToOffsetArrayOutputWithContext(ctx).OutputState,
	}
}

// OffsetMapInput is an input type that accepts OffsetMap and OffsetMapOutput values.
// You can construct a concrete instance of `OffsetMapInput` via:
//
//	OffsetMap{ "key": OffsetArgs{...} }
type OffsetMapInput interface {
	pulumi.Input

	ToOffsetMapOutput() OffsetMapOutput
	ToOffsetMapOutputWithContext(context.Context) OffsetMapOutput
}

type OffsetMap map[string]OffsetInput

func (OffsetMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Offset)(nil)).Elem()
}

func (i OffsetMap) ToOffsetMapOutput() OffsetMapOutput {
	return i.ToOffsetMapOutputWithContext(context.Background())
}

func (i OffsetMap) ToOffsetMapOutputWithContext(ctx context.Context) OffsetMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OffsetMapOutput)
}

func (i OffsetMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*Offset] {
	return pulumix.Output[map[string]*Offset]{
		OutputState: i.ToOffsetMapOutputWithContext(ctx).OutputState,
	}
}

type OffsetOutput struct{ *pulumi.OutputState }

func (OffsetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Offset)(nil)).Elem()
}

func (o OffsetOutput) ToOffsetOutput() OffsetOutput {
	return o
}

func (o OffsetOutput) ToOffsetOutputWithContext(ctx context.Context) OffsetOutput {
	return o
}

func (o OffsetOutput) ToOutput(ctx context.Context) pulumix.Output[*Offset] {
	return pulumix.Output[*Offset]{
		OutputState: o.OutputState,
	}
}

// Base timestamp in [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339#section-5.8) format (see [RFC3339 time string](https://tools.ietf.org/html/rfc3339#section-5.8) e.g., `YYYY-MM-DDTHH:MM:SSZ`). Defaults to the current time.
func (o OffsetOutput) BaseRfc3339() pulumi.StringOutput {
	return o.ApplyT(func(v *Offset) pulumi.StringOutput { return v.BaseRfc3339 }).(pulumi.StringOutput)
}

// Number day of offset timestamp.
func (o OffsetOutput) Day() pulumi.IntOutput {
	return o.ApplyT(func(v *Offset) pulumi.IntOutput { return v.Day }).(pulumi.IntOutput)
}

// Number hour of offset timestamp.
func (o OffsetOutput) Hour() pulumi.IntOutput {
	return o.ApplyT(func(v *Offset) pulumi.IntOutput { return v.Hour }).(pulumi.IntOutput)
}

// Number minute of offset timestamp.
func (o OffsetOutput) Minute() pulumi.IntOutput {
	return o.ApplyT(func(v *Offset) pulumi.IntOutput { return v.Minute }).(pulumi.IntOutput)
}

// Number month of offset timestamp.
func (o OffsetOutput) Month() pulumi.IntOutput {
	return o.ApplyT(func(v *Offset) pulumi.IntOutput { return v.Month }).(pulumi.IntOutput)
}

// Number of days to offset the base timestamp. At least one of the 'offset_' arguments must be configured.
func (o OffsetOutput) OffsetDays() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Offset) pulumi.IntPtrOutput { return v.OffsetDays }).(pulumi.IntPtrOutput)
}

// Number of hours to offset the base timestamp. At least one of the 'offset_' arguments must be configured.
func (o OffsetOutput) OffsetHours() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Offset) pulumi.IntPtrOutput { return v.OffsetHours }).(pulumi.IntPtrOutput)
}

// Number of minutes to offset the base timestamp. At least one of the 'offset_' arguments must be configured.
func (o OffsetOutput) OffsetMinutes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Offset) pulumi.IntPtrOutput { return v.OffsetMinutes }).(pulumi.IntPtrOutput)
}

// Number of months to offset the base timestamp. At least one of the 'offset_' arguments must be configured.
func (o OffsetOutput) OffsetMonths() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Offset) pulumi.IntPtrOutput { return v.OffsetMonths }).(pulumi.IntPtrOutput)
}

// Number of seconds to offset the base timestamp. At least one of the 'offset_' arguments must be configured.
func (o OffsetOutput) OffsetSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Offset) pulumi.IntPtrOutput { return v.OffsetSeconds }).(pulumi.IntPtrOutput)
}

// Number of years to offset the base timestamp. At least one of the 'offset_' arguments must be configured.
func (o OffsetOutput) OffsetYears() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Offset) pulumi.IntPtrOutput { return v.OffsetYears }).(pulumi.IntPtrOutput)
}

// RFC3339 format of the offset timestamp, e.g. `2020-02-12T06:36:13Z`.
func (o OffsetOutput) Rfc3339() pulumi.StringOutput {
	return o.ApplyT(func(v *Offset) pulumi.StringOutput { return v.Rfc3339 }).(pulumi.StringOutput)
}

// Number second of offset timestamp.
func (o OffsetOutput) Second() pulumi.IntOutput {
	return o.ApplyT(func(v *Offset) pulumi.IntOutput { return v.Second }).(pulumi.IntOutput)
}

// Arbitrary map of values that, when changed, will trigger a new base timestamp value to be saved. See the main provider documentation for more information.
func (o OffsetOutput) Triggers() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Offset) pulumi.StringMapOutput { return v.Triggers }).(pulumi.StringMapOutput)
}

// Number of seconds since epoch time, e.g. `1581489373`.
func (o OffsetOutput) Unix() pulumi.IntOutput {
	return o.ApplyT(func(v *Offset) pulumi.IntOutput { return v.Unix }).(pulumi.IntOutput)
}

// Number year of offset timestamp.
func (o OffsetOutput) Year() pulumi.IntOutput {
	return o.ApplyT(func(v *Offset) pulumi.IntOutput { return v.Year }).(pulumi.IntOutput)
}

type OffsetArrayOutput struct{ *pulumi.OutputState }

func (OffsetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Offset)(nil)).Elem()
}

func (o OffsetArrayOutput) ToOffsetArrayOutput() OffsetArrayOutput {
	return o
}

func (o OffsetArrayOutput) ToOffsetArrayOutputWithContext(ctx context.Context) OffsetArrayOutput {
	return o
}

func (o OffsetArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*Offset] {
	return pulumix.Output[[]*Offset]{
		OutputState: o.OutputState,
	}
}

func (o OffsetArrayOutput) Index(i pulumi.IntInput) OffsetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Offset {
		return vs[0].([]*Offset)[vs[1].(int)]
	}).(OffsetOutput)
}

type OffsetMapOutput struct{ *pulumi.OutputState }

func (OffsetMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Offset)(nil)).Elem()
}

func (o OffsetMapOutput) ToOffsetMapOutput() OffsetMapOutput {
	return o
}

func (o OffsetMapOutput) ToOffsetMapOutputWithContext(ctx context.Context) OffsetMapOutput {
	return o
}

func (o OffsetMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*Offset] {
	return pulumix.Output[map[string]*Offset]{
		OutputState: o.OutputState,
	}
}

func (o OffsetMapOutput) MapIndex(k pulumi.StringInput) OffsetOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Offset {
		return vs[0].(map[string]*Offset)[vs[1].(string)]
	}).(OffsetOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*OffsetInput)(nil)).Elem(), &Offset{})
	pulumi.RegisterInputType(reflect.TypeOf((*OffsetArrayInput)(nil)).Elem(), OffsetArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*OffsetMapInput)(nil)).Elem(), OffsetMap{})
	pulumi.RegisterOutputType(OffsetOutput{})
	pulumi.RegisterOutputType(OffsetArrayOutput{})
	pulumi.RegisterOutputType(OffsetMapOutput{})
}
