// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package time

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
	"github.com/pulumiverse/pulumi-time/sdk/go/time/internal"
)

// ## Example Usage
// ### Basic Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-time/sdk/go/time"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := time.NewRotating(ctx, "example", &time.RotatingArgs{
//				RotationDays: pulumi.Int(30),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// This resource can be imported using the base UTC RFC3339 value and rotation years, months, days, hours, and minutes, separated by commas (`,`), e.g. for 30 days
//
// ```sh
//
//	$ pulumi import time:index/rotating:Rotating example 2020-02-12T06:36:13Z,0,0,30,0,0
//
// ```
//
//	Otherwise, to import with the rotation RFC3339 value, the base UTC RFC3339 value and rotation UTC RFC3339 value, separated by commas (`,`), e.g.
//
// ```sh
//
//	$ pulumi import time:index/rotating:Rotating example 2020-02-12T06:36:13Z,2020-02-13T06:36:13Z
//
// ```
//
//	The `triggers` argument cannot be imported.
type Rotating struct {
	pulumi.CustomResourceState

	// Number day of timestamp.
	Day pulumi.IntOutput `pulumi:"day"`
	// Number hour of timestamp.
	Hour pulumi.IntOutput `pulumi:"hour"`
	// Number minute of timestamp.
	Minute pulumi.IntOutput `pulumi:"minute"`
	// Number month of timestamp.
	Month pulumi.IntOutput `pulumi:"month"`
	// Base timestamp in [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339#section-5.8) format (see [RFC3339 time string](https://tools.ietf.org/html/rfc3339#section-5.8) e.g., `YYYY-MM-DDTHH:MM:SSZ`). Defaults to the current time.
	Rfc3339 pulumi.StringOutput `pulumi:"rfc3339"`
	// Number of days to add to the base timestamp to configure the rotation timestamp. When the current time has passed the rotation timestamp, the resource will trigger recreation. At least one of the 'rotation_' arguments must be configured.
	RotationDays pulumi.IntPtrOutput `pulumi:"rotationDays"`
	// Number of hours to add to the base timestamp to configure the rotation timestamp. When the current time has passed the rotation timestamp, the resource will trigger recreation. At least one of the 'rotation_' arguments must be configured.
	RotationHours pulumi.IntPtrOutput `pulumi:"rotationHours"`
	// Number of minutes to add to the base timestamp to configure the rotation timestamp. When the current time has passed the rotation timestamp, the resource will trigger recreation. At least one of the 'rotation_' arguments must be configured.
	RotationMinutes pulumi.IntPtrOutput `pulumi:"rotationMinutes"`
	// Number of months to add to the base timestamp to configure the rotation timestamp. When the current time has passed the rotation timestamp, the resource will trigger recreation. At least one of the 'rotation_' arguments must be configured.
	RotationMonths pulumi.IntPtrOutput `pulumi:"rotationMonths"`
	// Configure the rotation timestamp with an [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339#section-5.8) format of the offset timestamp. When the current time has passed the rotation timestamp, the resource will trigger recreation. At least one of the 'rotation_' arguments must be configured.
	RotationRfc3339 pulumi.StringOutput `pulumi:"rotationRfc3339"`
	// Number of years to add to the base timestamp to configure the rotation timestamp. When the current time has passed the rotation timestamp, the resource will trigger recreation. At least one of the 'rotation_' arguments must be configured.
	RotationYears pulumi.IntPtrOutput `pulumi:"rotationYears"`
	// Number second of timestamp.
	Second pulumi.IntOutput `pulumi:"second"`
	// Arbitrary map of values that, when changed, will trigger a new base timestamp value to be saved. These conditions recreate the resource in addition to other rotation arguments. See the main provider documentation for more information.
	Triggers pulumi.StringMapOutput `pulumi:"triggers"`
	// Number of seconds since epoch time, e.g. `1581489373`.
	Unix pulumi.IntOutput `pulumi:"unix"`
	// Number year of timestamp.
	Year pulumi.IntOutput `pulumi:"year"`
}

// NewRotating registers a new resource with the given unique name, arguments, and options.
func NewRotating(ctx *pulumi.Context,
	name string, args *RotatingArgs, opts ...pulumi.ResourceOption) (*Rotating, error) {
	if args == nil {
		args = &RotatingArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Rotating
	err := ctx.RegisterResource("time:index/rotating:Rotating", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRotating gets an existing Rotating resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRotating(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RotatingState, opts ...pulumi.ResourceOption) (*Rotating, error) {
	var resource Rotating
	err := ctx.ReadResource("time:index/rotating:Rotating", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Rotating resources.
type rotatingState struct {
	// Number day of timestamp.
	Day *int `pulumi:"day"`
	// Number hour of timestamp.
	Hour *int `pulumi:"hour"`
	// Number minute of timestamp.
	Minute *int `pulumi:"minute"`
	// Number month of timestamp.
	Month *int `pulumi:"month"`
	// Base timestamp in [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339#section-5.8) format (see [RFC3339 time string](https://tools.ietf.org/html/rfc3339#section-5.8) e.g., `YYYY-MM-DDTHH:MM:SSZ`). Defaults to the current time.
	Rfc3339 *string `pulumi:"rfc3339"`
	// Number of days to add to the base timestamp to configure the rotation timestamp. When the current time has passed the rotation timestamp, the resource will trigger recreation. At least one of the 'rotation_' arguments must be configured.
	RotationDays *int `pulumi:"rotationDays"`
	// Number of hours to add to the base timestamp to configure the rotation timestamp. When the current time has passed the rotation timestamp, the resource will trigger recreation. At least one of the 'rotation_' arguments must be configured.
	RotationHours *int `pulumi:"rotationHours"`
	// Number of minutes to add to the base timestamp to configure the rotation timestamp. When the current time has passed the rotation timestamp, the resource will trigger recreation. At least one of the 'rotation_' arguments must be configured.
	RotationMinutes *int `pulumi:"rotationMinutes"`
	// Number of months to add to the base timestamp to configure the rotation timestamp. When the current time has passed the rotation timestamp, the resource will trigger recreation. At least one of the 'rotation_' arguments must be configured.
	RotationMonths *int `pulumi:"rotationMonths"`
	// Configure the rotation timestamp with an [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339#section-5.8) format of the offset timestamp. When the current time has passed the rotation timestamp, the resource will trigger recreation. At least one of the 'rotation_' arguments must be configured.
	RotationRfc3339 *string `pulumi:"rotationRfc3339"`
	// Number of years to add to the base timestamp to configure the rotation timestamp. When the current time has passed the rotation timestamp, the resource will trigger recreation. At least one of the 'rotation_' arguments must be configured.
	RotationYears *int `pulumi:"rotationYears"`
	// Number second of timestamp.
	Second *int `pulumi:"second"`
	// Arbitrary map of values that, when changed, will trigger a new base timestamp value to be saved. These conditions recreate the resource in addition to other rotation arguments. See the main provider documentation for more information.
	Triggers map[string]string `pulumi:"triggers"`
	// Number of seconds since epoch time, e.g. `1581489373`.
	Unix *int `pulumi:"unix"`
	// Number year of timestamp.
	Year *int `pulumi:"year"`
}

type RotatingState struct {
	// Number day of timestamp.
	Day pulumi.IntPtrInput
	// Number hour of timestamp.
	Hour pulumi.IntPtrInput
	// Number minute of timestamp.
	Minute pulumi.IntPtrInput
	// Number month of timestamp.
	Month pulumi.IntPtrInput
	// Base timestamp in [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339#section-5.8) format (see [RFC3339 time string](https://tools.ietf.org/html/rfc3339#section-5.8) e.g., `YYYY-MM-DDTHH:MM:SSZ`). Defaults to the current time.
	Rfc3339 pulumi.StringPtrInput
	// Number of days to add to the base timestamp to configure the rotation timestamp. When the current time has passed the rotation timestamp, the resource will trigger recreation. At least one of the 'rotation_' arguments must be configured.
	RotationDays pulumi.IntPtrInput
	// Number of hours to add to the base timestamp to configure the rotation timestamp. When the current time has passed the rotation timestamp, the resource will trigger recreation. At least one of the 'rotation_' arguments must be configured.
	RotationHours pulumi.IntPtrInput
	// Number of minutes to add to the base timestamp to configure the rotation timestamp. When the current time has passed the rotation timestamp, the resource will trigger recreation. At least one of the 'rotation_' arguments must be configured.
	RotationMinutes pulumi.IntPtrInput
	// Number of months to add to the base timestamp to configure the rotation timestamp. When the current time has passed the rotation timestamp, the resource will trigger recreation. At least one of the 'rotation_' arguments must be configured.
	RotationMonths pulumi.IntPtrInput
	// Configure the rotation timestamp with an [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339#section-5.8) format of the offset timestamp. When the current time has passed the rotation timestamp, the resource will trigger recreation. At least one of the 'rotation_' arguments must be configured.
	RotationRfc3339 pulumi.StringPtrInput
	// Number of years to add to the base timestamp to configure the rotation timestamp. When the current time has passed the rotation timestamp, the resource will trigger recreation. At least one of the 'rotation_' arguments must be configured.
	RotationYears pulumi.IntPtrInput
	// Number second of timestamp.
	Second pulumi.IntPtrInput
	// Arbitrary map of values that, when changed, will trigger a new base timestamp value to be saved. These conditions recreate the resource in addition to other rotation arguments. See the main provider documentation for more information.
	Triggers pulumi.StringMapInput
	// Number of seconds since epoch time, e.g. `1581489373`.
	Unix pulumi.IntPtrInput
	// Number year of timestamp.
	Year pulumi.IntPtrInput
}

func (RotatingState) ElementType() reflect.Type {
	return reflect.TypeOf((*rotatingState)(nil)).Elem()
}

type rotatingArgs struct {
	// Base timestamp in [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339#section-5.8) format (see [RFC3339 time string](https://tools.ietf.org/html/rfc3339#section-5.8) e.g., `YYYY-MM-DDTHH:MM:SSZ`). Defaults to the current time.
	Rfc3339 *string `pulumi:"rfc3339"`
	// Number of days to add to the base timestamp to configure the rotation timestamp. When the current time has passed the rotation timestamp, the resource will trigger recreation. At least one of the 'rotation_' arguments must be configured.
	RotationDays *int `pulumi:"rotationDays"`
	// Number of hours to add to the base timestamp to configure the rotation timestamp. When the current time has passed the rotation timestamp, the resource will trigger recreation. At least one of the 'rotation_' arguments must be configured.
	RotationHours *int `pulumi:"rotationHours"`
	// Number of minutes to add to the base timestamp to configure the rotation timestamp. When the current time has passed the rotation timestamp, the resource will trigger recreation. At least one of the 'rotation_' arguments must be configured.
	RotationMinutes *int `pulumi:"rotationMinutes"`
	// Number of months to add to the base timestamp to configure the rotation timestamp. When the current time has passed the rotation timestamp, the resource will trigger recreation. At least one of the 'rotation_' arguments must be configured.
	RotationMonths *int `pulumi:"rotationMonths"`
	// Configure the rotation timestamp with an [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339#section-5.8) format of the offset timestamp. When the current time has passed the rotation timestamp, the resource will trigger recreation. At least one of the 'rotation_' arguments must be configured.
	RotationRfc3339 *string `pulumi:"rotationRfc3339"`
	// Number of years to add to the base timestamp to configure the rotation timestamp. When the current time has passed the rotation timestamp, the resource will trigger recreation. At least one of the 'rotation_' arguments must be configured.
	RotationYears *int `pulumi:"rotationYears"`
	// Arbitrary map of values that, when changed, will trigger a new base timestamp value to be saved. These conditions recreate the resource in addition to other rotation arguments. See the main provider documentation for more information.
	Triggers map[string]string `pulumi:"triggers"`
}

// The set of arguments for constructing a Rotating resource.
type RotatingArgs struct {
	// Base timestamp in [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339#section-5.8) format (see [RFC3339 time string](https://tools.ietf.org/html/rfc3339#section-5.8) e.g., `YYYY-MM-DDTHH:MM:SSZ`). Defaults to the current time.
	Rfc3339 pulumi.StringPtrInput
	// Number of days to add to the base timestamp to configure the rotation timestamp. When the current time has passed the rotation timestamp, the resource will trigger recreation. At least one of the 'rotation_' arguments must be configured.
	RotationDays pulumi.IntPtrInput
	// Number of hours to add to the base timestamp to configure the rotation timestamp. When the current time has passed the rotation timestamp, the resource will trigger recreation. At least one of the 'rotation_' arguments must be configured.
	RotationHours pulumi.IntPtrInput
	// Number of minutes to add to the base timestamp to configure the rotation timestamp. When the current time has passed the rotation timestamp, the resource will trigger recreation. At least one of the 'rotation_' arguments must be configured.
	RotationMinutes pulumi.IntPtrInput
	// Number of months to add to the base timestamp to configure the rotation timestamp. When the current time has passed the rotation timestamp, the resource will trigger recreation. At least one of the 'rotation_' arguments must be configured.
	RotationMonths pulumi.IntPtrInput
	// Configure the rotation timestamp with an [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339#section-5.8) format of the offset timestamp. When the current time has passed the rotation timestamp, the resource will trigger recreation. At least one of the 'rotation_' arguments must be configured.
	RotationRfc3339 pulumi.StringPtrInput
	// Number of years to add to the base timestamp to configure the rotation timestamp. When the current time has passed the rotation timestamp, the resource will trigger recreation. At least one of the 'rotation_' arguments must be configured.
	RotationYears pulumi.IntPtrInput
	// Arbitrary map of values that, when changed, will trigger a new base timestamp value to be saved. These conditions recreate the resource in addition to other rotation arguments. See the main provider documentation for more information.
	Triggers pulumi.StringMapInput
}

func (RotatingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*rotatingArgs)(nil)).Elem()
}

type RotatingInput interface {
	pulumi.Input

	ToRotatingOutput() RotatingOutput
	ToRotatingOutputWithContext(ctx context.Context) RotatingOutput
}

func (*Rotating) ElementType() reflect.Type {
	return reflect.TypeOf((**Rotating)(nil)).Elem()
}

func (i *Rotating) ToRotatingOutput() RotatingOutput {
	return i.ToRotatingOutputWithContext(context.Background())
}

func (i *Rotating) ToRotatingOutputWithContext(ctx context.Context) RotatingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RotatingOutput)
}

func (i *Rotating) ToOutput(ctx context.Context) pulumix.Output[*Rotating] {
	return pulumix.Output[*Rotating]{
		OutputState: i.ToRotatingOutputWithContext(ctx).OutputState,
	}
}

// RotatingArrayInput is an input type that accepts RotatingArray and RotatingArrayOutput values.
// You can construct a concrete instance of `RotatingArrayInput` via:
//
//	RotatingArray{ RotatingArgs{...} }
type RotatingArrayInput interface {
	pulumi.Input

	ToRotatingArrayOutput() RotatingArrayOutput
	ToRotatingArrayOutputWithContext(context.Context) RotatingArrayOutput
}

type RotatingArray []RotatingInput

func (RotatingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Rotating)(nil)).Elem()
}

func (i RotatingArray) ToRotatingArrayOutput() RotatingArrayOutput {
	return i.ToRotatingArrayOutputWithContext(context.Background())
}

func (i RotatingArray) ToRotatingArrayOutputWithContext(ctx context.Context) RotatingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RotatingArrayOutput)
}

func (i RotatingArray) ToOutput(ctx context.Context) pulumix.Output[[]*Rotating] {
	return pulumix.Output[[]*Rotating]{
		OutputState: i.ToRotatingArrayOutputWithContext(ctx).OutputState,
	}
}

// RotatingMapInput is an input type that accepts RotatingMap and RotatingMapOutput values.
// You can construct a concrete instance of `RotatingMapInput` via:
//
//	RotatingMap{ "key": RotatingArgs{...} }
type RotatingMapInput interface {
	pulumi.Input

	ToRotatingMapOutput() RotatingMapOutput
	ToRotatingMapOutputWithContext(context.Context) RotatingMapOutput
}

type RotatingMap map[string]RotatingInput

func (RotatingMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Rotating)(nil)).Elem()
}

func (i RotatingMap) ToRotatingMapOutput() RotatingMapOutput {
	return i.ToRotatingMapOutputWithContext(context.Background())
}

func (i RotatingMap) ToRotatingMapOutputWithContext(ctx context.Context) RotatingMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RotatingMapOutput)
}

func (i RotatingMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*Rotating] {
	return pulumix.Output[map[string]*Rotating]{
		OutputState: i.ToRotatingMapOutputWithContext(ctx).OutputState,
	}
}

type RotatingOutput struct{ *pulumi.OutputState }

func (RotatingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Rotating)(nil)).Elem()
}

func (o RotatingOutput) ToRotatingOutput() RotatingOutput {
	return o
}

func (o RotatingOutput) ToRotatingOutputWithContext(ctx context.Context) RotatingOutput {
	return o
}

func (o RotatingOutput) ToOutput(ctx context.Context) pulumix.Output[*Rotating] {
	return pulumix.Output[*Rotating]{
		OutputState: o.OutputState,
	}
}

// Number day of timestamp.
func (o RotatingOutput) Day() pulumi.IntOutput {
	return o.ApplyT(func(v *Rotating) pulumi.IntOutput { return v.Day }).(pulumi.IntOutput)
}

// Number hour of timestamp.
func (o RotatingOutput) Hour() pulumi.IntOutput {
	return o.ApplyT(func(v *Rotating) pulumi.IntOutput { return v.Hour }).(pulumi.IntOutput)
}

// Number minute of timestamp.
func (o RotatingOutput) Minute() pulumi.IntOutput {
	return o.ApplyT(func(v *Rotating) pulumi.IntOutput { return v.Minute }).(pulumi.IntOutput)
}

// Number month of timestamp.
func (o RotatingOutput) Month() pulumi.IntOutput {
	return o.ApplyT(func(v *Rotating) pulumi.IntOutput { return v.Month }).(pulumi.IntOutput)
}

// Base timestamp in [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339#section-5.8) format (see [RFC3339 time string](https://tools.ietf.org/html/rfc3339#section-5.8) e.g., `YYYY-MM-DDTHH:MM:SSZ`). Defaults to the current time.
func (o RotatingOutput) Rfc3339() pulumi.StringOutput {
	return o.ApplyT(func(v *Rotating) pulumi.StringOutput { return v.Rfc3339 }).(pulumi.StringOutput)
}

// Number of days to add to the base timestamp to configure the rotation timestamp. When the current time has passed the rotation timestamp, the resource will trigger recreation. At least one of the 'rotation_' arguments must be configured.
func (o RotatingOutput) RotationDays() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Rotating) pulumi.IntPtrOutput { return v.RotationDays }).(pulumi.IntPtrOutput)
}

// Number of hours to add to the base timestamp to configure the rotation timestamp. When the current time has passed the rotation timestamp, the resource will trigger recreation. At least one of the 'rotation_' arguments must be configured.
func (o RotatingOutput) RotationHours() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Rotating) pulumi.IntPtrOutput { return v.RotationHours }).(pulumi.IntPtrOutput)
}

// Number of minutes to add to the base timestamp to configure the rotation timestamp. When the current time has passed the rotation timestamp, the resource will trigger recreation. At least one of the 'rotation_' arguments must be configured.
func (o RotatingOutput) RotationMinutes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Rotating) pulumi.IntPtrOutput { return v.RotationMinutes }).(pulumi.IntPtrOutput)
}

// Number of months to add to the base timestamp to configure the rotation timestamp. When the current time has passed the rotation timestamp, the resource will trigger recreation. At least one of the 'rotation_' arguments must be configured.
func (o RotatingOutput) RotationMonths() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Rotating) pulumi.IntPtrOutput { return v.RotationMonths }).(pulumi.IntPtrOutput)
}

// Configure the rotation timestamp with an [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339#section-5.8) format of the offset timestamp. When the current time has passed the rotation timestamp, the resource will trigger recreation. At least one of the 'rotation_' arguments must be configured.
func (o RotatingOutput) RotationRfc3339() pulumi.StringOutput {
	return o.ApplyT(func(v *Rotating) pulumi.StringOutput { return v.RotationRfc3339 }).(pulumi.StringOutput)
}

// Number of years to add to the base timestamp to configure the rotation timestamp. When the current time has passed the rotation timestamp, the resource will trigger recreation. At least one of the 'rotation_' arguments must be configured.
func (o RotatingOutput) RotationYears() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Rotating) pulumi.IntPtrOutput { return v.RotationYears }).(pulumi.IntPtrOutput)
}

// Number second of timestamp.
func (o RotatingOutput) Second() pulumi.IntOutput {
	return o.ApplyT(func(v *Rotating) pulumi.IntOutput { return v.Second }).(pulumi.IntOutput)
}

// Arbitrary map of values that, when changed, will trigger a new base timestamp value to be saved. These conditions recreate the resource in addition to other rotation arguments. See the main provider documentation for more information.
func (o RotatingOutput) Triggers() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Rotating) pulumi.StringMapOutput { return v.Triggers }).(pulumi.StringMapOutput)
}

// Number of seconds since epoch time, e.g. `1581489373`.
func (o RotatingOutput) Unix() pulumi.IntOutput {
	return o.ApplyT(func(v *Rotating) pulumi.IntOutput { return v.Unix }).(pulumi.IntOutput)
}

// Number year of timestamp.
func (o RotatingOutput) Year() pulumi.IntOutput {
	return o.ApplyT(func(v *Rotating) pulumi.IntOutput { return v.Year }).(pulumi.IntOutput)
}

type RotatingArrayOutput struct{ *pulumi.OutputState }

func (RotatingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Rotating)(nil)).Elem()
}

func (o RotatingArrayOutput) ToRotatingArrayOutput() RotatingArrayOutput {
	return o
}

func (o RotatingArrayOutput) ToRotatingArrayOutputWithContext(ctx context.Context) RotatingArrayOutput {
	return o
}

func (o RotatingArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*Rotating] {
	return pulumix.Output[[]*Rotating]{
		OutputState: o.OutputState,
	}
}

func (o RotatingArrayOutput) Index(i pulumi.IntInput) RotatingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Rotating {
		return vs[0].([]*Rotating)[vs[1].(int)]
	}).(RotatingOutput)
}

type RotatingMapOutput struct{ *pulumi.OutputState }

func (RotatingMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Rotating)(nil)).Elem()
}

func (o RotatingMapOutput) ToRotatingMapOutput() RotatingMapOutput {
	return o
}

func (o RotatingMapOutput) ToRotatingMapOutputWithContext(ctx context.Context) RotatingMapOutput {
	return o
}

func (o RotatingMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*Rotating] {
	return pulumix.Output[map[string]*Rotating]{
		OutputState: o.OutputState,
	}
}

func (o RotatingMapOutput) MapIndex(k pulumi.StringInput) RotatingOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Rotating {
		return vs[0].(map[string]*Rotating)[vs[1].(string)]
	}).(RotatingOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RotatingInput)(nil)).Elem(), &Rotating{})
	pulumi.RegisterInputType(reflect.TypeOf((*RotatingArrayInput)(nil)).Elem(), RotatingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RotatingMapInput)(nil)).Elem(), RotatingMap{})
	pulumi.RegisterOutputType(RotatingOutput{})
	pulumi.RegisterOutputType(RotatingArrayOutput{})
	pulumi.RegisterOutputType(RotatingMapOutput{})
}
