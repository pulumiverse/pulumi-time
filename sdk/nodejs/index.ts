// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { OffsetArgs, OffsetState } from "./offset";
export type Offset = import("./offset").Offset;
export const Offset: typeof import("./offset").Offset = null as any;
utilities.lazyLoad(exports, ["Offset"], () => require("./offset"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { RotatingArgs, RotatingState } from "./rotating";
export type Rotating = import("./rotating").Rotating;
export const Rotating: typeof import("./rotating").Rotating = null as any;
utilities.lazyLoad(exports, ["Rotating"], () => require("./rotating"));

export { StaticArgs, StaticState } from "./static";
export type Static = import("./static").Static;
export const Static: typeof import("./static").Static = null as any;
utilities.lazyLoad(exports, ["Static"], () => require("./static"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "time:index/offset:Offset":
                return new Offset(name, <any>undefined, { urn })
            case "time:index/rotating:Rotating":
                return new Rotating(name, <any>undefined, { urn })
            case "time:index/static:Static":
                return new Static(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("time", "index/offset", _module)
pulumi.runtime.registerResourceModule("time", "index/rotating", _module)
pulumi.runtime.registerResourceModule("time", "index/static", _module)
pulumi.runtime.registerResourcePackage("time", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:time") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
